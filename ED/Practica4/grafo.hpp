#ifndef __GRAFO_HPP__
#define __GRAFO_HPP__

#include <cassert>
#include <iostream>

using namespace std;

namespace ed {

	template <class G_Nodo, class G_Lado>

	class Grafo {

////////////////////////////////////////////////////////////////////////////////

		private:
			// Indica el tipo genérico utilizado para representar un nodo.
			G_Nodo *_nodos;
			// Indica el tipo genérico utilizado para representar un lado.
			G_Lado **_lados;
			// Un vector de un tipo parametrizado que representa los nodos del grafo (_nodos).
			std::vector<_nodos> vecNodos;
			// Una matriz de un tipo parametrizado que representa los lados del grafo (_lados).
			_lados matrizLados[filas][columnas];

////////////////////////////////////////////////////////////////////////////////

		public:

////////////////////////////////////////////////////////////////////////////////
			// Constructores.
////////////////////////////////////////////////////////////////////////////////

			Grafo () {

			}

			Grafo (const int nNodos) {

			}

			Grafo (const Grafo &grafo) {

			}

////////////////////////////////////////////////////////////////////////////////
			// Destructor.
////////////////////////////////////////////////////////////////////////////////

			~ Grafo() {

			}

////////////////////////////////////////////////////////////////////////////////
			// Funciones.
////////////////////////////////////////////////////////////////////////////////

			void borrarGrafo() {

			}

////////////////////////////////////////////////////////////////////////////////

	};
}

#endif
